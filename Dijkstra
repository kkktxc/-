#include<stdio.h>
#include<stdlib.h>
#define MAXSIZE 100
#define MAX 666666
typedef char vertexType;
typedef int edgeType;
typedef int Patharc[MAXSIZE];
typedef int ShortPathTable[MAXSIZE];
typedef struct{
    vertexType vertex[MAXSIZE];
    edgeType arc[MAXSIZE][MAXSIZE];
    int vertexNUM;
    int edgeNUM;
}graph;
void createGraph(graph* G);
void Dijkstra(graph G,int v0,Patharc* P,ShortPathTable* D);
int main(){
	int i,j,v0;
	graph G;
	Patharc P;
	ShortPathTable D;
	v0=0;
	createGraph(&G);
	Dijkstra(G,v0,&P,&D);
	printf("最短路径倒序如下：\n");
	for(i=1;i<G.vertexNUM;i++){
		printf("%c - %c：",G.vertex[v0],G.vertex[i]);
		j=i;
		while(P[j]!=-1){
			printf("%c ",G.vertex[P[j]]);
			j=P[j];
		}
		printf("\n");
	}
	printf("\n源点到各顶点的路径长度：\n");
	for(i=1;i<G.vertexNUM;i++){
		printf("%c - %c ：%d\n",G.vertex[v0],G.vertex[i],D[i]);
	}
    return 0;
}
void createGraph(graph* G){
    int i,j;
    G->vertexNUM=9;
    G->edgeNUM=16;
    G->vertex[0]='A';
    G->vertex[1]='B';
    G->vertex[2]='C';
    G->vertex[3]='D';
    G->vertex[4]='E';
    G->vertex[5]='F';
    G->vertex[6]='G';
    G->vertex[7]='H';
    G->vertex[8]='I';
    for(i=0;i<9;i++){
        for(j=0;j<9;j++){
            if(i==j){
                G->arc[i][j]=0;
            }
            else{
                G->arc[i][j]=MAX;
            }
        }
    }
    //A-B A-C
    G->arc[0][1]=1;
    G->arc[0][2]=5;
    //B-C B-D B-E
    G->arc[1][2]=3;
    G->arc[1][3]=7;
    G->arc[1][4]=5;
    //C-E C-F
    G->arc[2][4]=1;
    G->arc[2][5]=7;
    //D-E D-G
    G->arc[3][4]=2;
    G->arc[3][6]=3;
    //E-F E-G E-H
    G->arc[4][5]=3;
    G->arc[4][6]=6;
    G->arc[4][7]=9;
    //F-H
    G->arc[5][7]=5;
    //G-H G-I
    G->arc[6][7]=2;
    G->arc[6][8]=7;
    //H-I
    G->arc[7][8]=4;

    for(i=0;i<9;i++){
        for(j=0;j<i;j++){
            G->arc[i][j]=G->arc[j][i];
        }
    }
}
void Dijkstra(graph G,int v0,Patharc* P,ShortPathTable* D){
	int i,j,k,min;
	int final[MAXSIZE];
	for(i=0;i<G.vertexNUM;i++){
		final[i]=0;
		(*P)[i]=-1;
		(*D)[i]=G.arc[v0][i];
	}
	final[v0]=1;
	(*D)[v0]=0;
	for(i=1;i<G.vertexNUM;i++){
		min=MAX;
		for(j=0;j<G.vertexNUM;j++){
			if(!final[j]&&min>(*D)[j]){
				min=(*D)[j];
				k=j;
			}
		}
		final[k]=1;
		for(j=0;j<G.vertexNUM;j++){
			if(!final[j]&&min+G.arc[k][j]<(*D)[j]){
				(*D)[j]=min+G.arc[k][j];
				(*P)[j]=k;
			}
		}
	}

}
