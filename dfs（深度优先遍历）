#include<stdio.h>
#define MAXSIZE 100
typedef char vertexType;
typedef int edgeType;
typedef struct{
	vertexType vertex[MAXSIZE];
	edgeType edge[MAXSIZE][MAXSIZE];
	int vertexNUM;
	int edgeNUM;
}graph;
int visited[MAXSIZE];
void createGraph(graph* T);
void dfs(graph G,int i);
int main(){
	int i=0;
	graph G;
	createGraph(&G);
	for(i=0;i<G.vertexNUM;i++){
		visited[i]=0;
	}

	i=0;
	dfs(G,i);
	printf("\n");


	return 0;
}
void createGraph(graph* T){
	int i=0;
	int j=0;
	T->vertexNUM=9;
	T->edgeNUM=15;
	T->vertex[0]='A';
	T->vertex[1]='B';
	T->vertex[2]='C';
	T->vertex[3]='D';
	T->vertex[4]='E';
	T->vertex[5]='F';
	T->vertex[6]='G';
	T->vertex[7]='H';
	T->vertex[8]='I';

	for(i=0;i<9;i++){
		for(j=0;j<9;j++){
			T->edge[i][j]=0;
		}
	}

	T->edge[0][1]=1;
	T->edge[0][5]=1;

	T->edge[1][2]=1;
	T->edge[1][6]=1;
	T->edge[1][8]=1;

	T->edge[2][3]=1;
	T->edge[2][8]=1;

	T->edge[3][4]=1;
	T->edge[3][6]=1;
	T->edge[3][7]=1;
	T->edge[3][8]=1;

	T->edge[4][5]=1;
	T->edge[4][7]=1;

	T->edge[5][6]=1;

	T->edge[6][7]=1;

	for(i=0;i<9;i++){
		for(j=0;j<i;j++){
			T->edge[i][j]=T->edge[j][i];
		}
	}

}
void dfs(graph G,int i){
	int j;
	visited[i]=1;
	printf("%c ",G.vertex[i]);
	for(j=0;j<G.vertexNUM;j++){
		if(G.edge[i][j]&&!visited[j]){
			fds(G,j);
		}
	}
}
