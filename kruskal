#include<stdio.h>
#include<stdlib.h>
#define MAXSIZE 100
#define MAX 0x7fffffff
typedef char vertexType;
typedef int edgeType;
typedef struct{
	vertexType vertex[MAXSIZE];
	edgeType edge[MAXSIZE][MAXSIZE];
	int vertexNUM;
	int edgeNUM;
}graph;
typedef struct{
	int begin;
	int end;
	int weight;
}edge;
void creategraph(graph* g);
void kruskal(graph* g);
int find(int* parent,int I);
int main(){
	graph* G=(graph*)malloc(sizeof(graph));
	creategraph(G);
	kruskal(G);



	return 0;
}
void creategraph(graph* g){
	int i,j;
	g->vertexNUM=9;
	g->edgeNUM=15;
	g->vertex[0]='A';
	g->vertex[1]='B';
	g->vertex[2]='C';
	g->vertex[3]='D';
	g->vertex[4]='E';
	g->vertex[5]='F';
	g->vertex[6]='G';
	g->vertex[7]='H';
	g->vertex[8]='I';
	for(i=0;i<g->vertexNUM;i++){
		for(j=0;j<g->vertexNUM;j++){
			if(i==j){
				g->edge[i][j]=0;
			}
			else{
				g->edge[i][j]=MAX;
			}
		}
	}
	//A-B A-F
	g->edge[0][1]=10;
	g->edge[0][5]=11;
	//B-C B-G B-I
	g->edge[1][2]=18;
	g->edge[1][6]=16;
	g->edge[1][8]=12;
	//C-D C-I
	g->edge[2][3]=22;
	g->edge[2][8]=8;
	//D-E D-G D-H D-I
	g->edge[3][4]=20;
	g->edge[3][6]=24;
	g->edge[3][7]=16;
	g->edge[3][8]=21;
	//E-F E-H
	g->edge[4][5]=26;
	g->edge[4][7]=7;
	//F-G
	g->edge[5][6]=17;
	//G-H
	g->edge[6][7]=20;

	for(i=0;i<g->vertexNUM;i++){
		for(j=0;j<i;j++){
			g->edge[i][j]=g->edge[j][i];
		}
	}
}
void kruskal(graph* g){
	int i,j,k;
	int* parent=(int*)malloc(sizeof(int)*g->vertexNUM);
	edge** E=(edge**)malloc(sizeof(edge*)*g->edgeNUM);
	k=0;
	for(i=0;i<g->vertexNUM;i++){
		for(j=i+1;j<g->vertexNUM;j++){
			if(g->edge[i][j]<MAX){
				E[k]=(edge*)malloc(sizeof(edge));
				E[k]->begin=i;
				E[k]->end=j;
				E[k]->weight=g->edge[i][j];
				k++;
			}
		}
	}

	//选择排序
	for(i=0;i<g->edgeNUM-1;i++){
		for(j=i+1;j<g->edgeNUM;j++){
			if(E[i]->weight>E[j]->weight){
				edge* temp=E[i];
				E[i]=E[j];
				E[j]=temp;
			}
		}
	}

	for(i=0;i<g->vertexNUM;i++){
		parent[i]=0;
	}

	for(i=0;i<g->edgeNUM;i++){
		int n,m;
		n=find(parent,E[i]->begin);
		m=find(parent,E[i]->end);
		if(n!=m){
			parent[n]=m;
			printf("（%c，%c）%d\n",g->vertex[E[i]->begin],g->vertex[E[i]->end],E[i]->weight);
		}
	}
}
int find(int* parent,int I){
	while(parent[I]>0){
		I=parent[I];
	}
	return I;
}
