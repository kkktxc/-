#include<stdio.h>
#include<stdlib.h>
typedef char vertexType;
typedef int edgeType;
#define MAXSIZE 100
#define MAX 0x7fffffff
typedef struct{
	vertexType vertex[MAXSIZE];
	edgeType edge[MAXSIZE][MAXSIZE];
	int vertexNUM;
	int edgeNUM;
}graph;
void createGraph(graph* g);
void prim(graph* g);
int main(){
	graph* G=(graph*)malloc(sizeof(graph));
	createGraph(G);
	prim(G);



	return 0;
}
void createGraph(graph* g){
	int i,j;
	g->vertexNUM=9;
	g->edgeNUM=15;
	g->vertex[0]='A';
	g->vertex[1]='B';
	g->vertex[2]='C';
	g->vertex[3]='D';
	g->vertex[4]='E';
	g->vertex[5]='F';
	g->vertex[6]='G';
	g->vertex[7]='H';
	g->vertex[8]='I';

	for(i=0;i<g->vertexNUM;i++){
		for(j=0;j<g->vertexNUM;j++){
			if(i==j){
				g->edge[i][j]=0;
			}
			else{
				g->edge[i][j]=MAX;
			}
		}
	}

	//A-B A-F
	g->edge[0][1]=10;
	g->edge[0][5]=11;

	//B-C B-G B-I
	g->edge[1][2]=18;
	g->edge[1][6]=16;
	g->edge[1][8]=12;

	//C-D C-I
	g->edge[2][3]=22;
	g->edge[2][8]=8;

	//D-E D-G D-H D-I
	g->edge[3][4]=20;
	g->edge[3][6]=24;
	g->edge[3][7]=16;
	g->edge[3][8]=21;

	//E-F E-H
	g->edge[4][5]=26;
	g->edge[4][7]=7;

	//F-G
	g->edge[5][6]=17;

	//G-H
	g->edge[6][7]=19;

	for(i=0;i<g->vertexNUM;i++){
		for(j=0;j<i;j++){
			g->edge[i][j]=g->edge[j][i];
		}
	}
}
void prim(graph* g){
	int weight[9];
	int vex_index[9];
	int i=0;
	int j;
	int k;
	for(j=0;j<g->vertexNUM;j++){
		weight[j]=g->edge[i][j];
		vex_index[j]=i;
	}
	for(k=1;k<g->vertexNUM;k++){
		int min=MAX;
		for(i=0;i<g->vertexNUM;i++){
			if(weight[i]!=0&&min>weight[i]){
				min=weight[i];
				j=i;
			}
		}

		printf("（%c，%c）",g->vertex[vex_index[j]],g->vertex[j]);
		weight[j]=0;
		for(i=0;i<g->vertexNUM;i++){
			if(weight[i]!=0&&g->edge[j][i]<weight[i]){
				weight[i]=g->edge[j][i];
				vex_index[i]=j;
			}
		}
	}
}
